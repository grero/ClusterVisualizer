implementations:
- cluster merging
    - works in a certain fashion. Left to do: make system take colors from the cluster and not the initial load
	- FIXED!
- select points
- display number of points in each cluster
	- FIXED!
- display mean waveform
- show Xcorr between clusters
- show isi
    - show pair of waveforms with minimum ISI
- compare waveforms
    - compare real and fake waveforms

(- Fix problem with glMapBuffer returning NULL. Could be related to low system memory, but could also be something else. The only thing I changed
was to change cluster indexing from normal GLUint arrays to NSIndexSet. The reason for this is that it will make things like intersection and
set differences easier.) 
	- FIXED (Cause: I wasn't unmapping the buffer if new_size==0)

- Change Array Controller such that only valid clusters are drawn. This amounts to given each cluster an additional boolean property indicating 
whether the cluster is valid or not. To get the Array Controller to only display valid clusters, we can create a predicate which checks the valid
property of each cluster, filters the clusters accordingly.
    - Something a bit strange.. apparently, I can't merge clusters that are already merged..
	- FIXED! (Not too sure what the problem was)    
    

- In the process of rewriting the feature loading to be more general. Make sure a single group is selected, by explicitly selecting the file, rather than just the directory.
	-FIXED!

- Look into Using NSUndoManager to manage the cluster manipulation. This can be used to e.g. undo a cluster merge.

- Implement a method for deleting a cluster; if a base cluster, i.e. a cluster that was part of the original klustakwik output, the points formerly assigned to this cluster
	-FIXED!
should be put into cluster 0. If deleting a cluster that was the result of some manipulation in FeatureViewer, return the points in those clusters to the original KlustaKwik cluster, alternative, the managed clusters that resulting in the deleted cluster. This is where the undoManager comes in. Since merging a cluster reassigns the colors of the corresponding feature points, deleting that cluster should restore the original color assignment. In other words, if clusters 18 and 19 are merged in the cluster "18+19", the union of points in those two clusters receive the same coloring as the points in cluster 18. If we now undo the merging action, the points formerly belonging to cluster 19 should be re-colored using the color of cluster 19. This can most easily be achieved by a recolorPoints method in FeatureView that takes as an argument the cluster containing the points to be recolored. In other words, this would be similar to showCluster, except that in addition to resetting the indices, we are also restting the colors

- Add text rendering to the system. For this, look into the GLString object and NSAttributedString object. This is less critical for the feature space, but if I want to add things like ISI-histogram and waveforms view, I would need to at the very least add some labels to the axis.

- Started working on a simple waveforms view, whereby if requested, the waveforms fo the currently selected custer(s) can be viewed. I created an NSPanel class for this, containing a custom NSOpenGLView. The idea, then, is that a number of such panels can be opened, depending on the currenly activated clusters. Typically, the waveforms of two clusters will need to be compared. Is this the best way of doing it, or should I instead put both waveforms in one panel?
	- This is more complicated than anticipated. Because multiple views will now have to support OpenGL drawing, I cannot use NSopenGlView. Rather, I need to create my own custom view. This is quite a project, so maybe I'll get someone else to do this.

- I should refactor the code, so that only drawing related functions are in the view classes, while event handlers and such are in a window controller class
- Sometimes the scaling of the axis is very different; perhaps we should use normalized coordinates
	- FIXED!
- Implement a way to filter the clusters, e.g. only show clusters with more than 100 points, etc. This could be achieved by opening up a predicate panel ala what Finder search uses, so that we can specify multiple filter criteria
	- STARTED!

- Implement a way to read the time stamps as well. This would be useful if we want to look at ISI violations.
	- FIXED!
- Add a way to compute Chi2 CDF. This means importing the GSL library. I need this to compute the L-ratio of the clusters
	-FIXED, although there appears to be clusters with non-positive definite matrices
- After I started using NSOperationQueue and blocks for doing the L-ratio calculation, the program crashes all thet ime
